{"version":3,"file":"274.63c8e979.iframe.bundle.js","mappings":";;;;;;;AAYA;;;AAKA;;;AAGA;AAGA;;;;;;;;AAUA;;;;;;;;;AAWA;;;AAGA;;;AAKA;;;;;AAOA;;;;AAMA;;;;;AAOA;;;;AC5DA;;;;AAIA;;AAIA","sources":["webpack://poi-plugin-quest-info-2/./src/components/QuestCard/styles.ts","webpack://poi-plugin-quest-info-2/./src/components/QuestTag.tsx"],"sourcesContent":["import { Button, Card } from '@blueprintjs/core'\nimport styled from 'styled-components'\n\nexport const FlexCard = styled(Card)`\n  display: flex;\n  align-items: center;\n\n  & > * + * {\n    margin-left: 8px;\n  }\n`\n\nexport const CardMedia = styled.img`\n  width: 64px;\n  height: 64px;\n`\n\nexport const CatIndicator = styled.span<{ color: string }>`\n  height: 1em;\n  width: 4px;\n  background-color: ${({ color }) => color};\n`\n\nexport const CardBody = styled.div`\n  display: flex;\n  flex: 1;\n  flex-direction: column;\n\n  & > * + * {\n    margin-top: 8px;\n  }\n`\n\nexport const CardTail = styled.div`\n  align-self: stretch;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n\n  img {\n    height: 20px;\n  }\n`\n\nexport const MoreButton = styled(Button)`\n  opacity: 0;\n\n  ${FlexCard}:hover & {\n    opacity: 1;\n  }\n`\n\nexport const TailIconWrapper = styled.div`\n  flex: 1;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`\n\nexport const CardActionWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: baseline;\n`\n\nexport const TagsWrapper = styled.div`\n  display: flex;\n  flex: 1;\n  flex-wrap: wrap;\n  align-items: center;\n`\n\nexport const SpanText = styled.span`\n  white-space: nowrap;\n`\n","import type { TooltipProps } from '@blueprintjs/core'\nimport { Tag, Tooltip } from '@blueprintjs/core'\nimport { IconNames } from '@blueprintjs/icons'\nimport React, { forwardRef, useCallback } from 'react'\nimport styled from 'styled-components'\nimport { DocQuest, QUEST_STATUS, guessQuestCategory } from '../questHelper'\nimport { useFilterTags } from '../store/filterTags'\nimport { useQuestByCode, useQuestStatus } from '../store/quest'\nimport { useSearchInput } from '../store/search'\n\nconst TagWrapper = styled(Tag)`\n  margin: 2px 4px;\n  user-select: ${({ interactive }) => (interactive ? 'none' : 'auto')};\n  overflow: visible;\n\n  & > span {\n    cursor: ${({ interactive }) => (interactive ? 'pointer' : 'auto')};\n  }\n`\n\nconst QuestTooltip = forwardRef<\n  Tooltip,\n  Omit<TooltipProps, 'content'> & {\n    quest: DocQuest\n    children: React.ReactNode\n  }\n>(({ quest, children, ...props }, ref) => {\n  if (!quest) {\n    return <>{children}</>\n  }\n  return (\n    <Tooltip\n      ref={ref}\n      content={\n        <>\n          <div>{`${quest.code} - ${quest.name}`}</div>\n          <div>{quest.desc}</div>\n          {quest.memo2 && (\n            <div>\n              <b>{quest.memo2}</b>\n            </div>\n          )}\n          {quest.rewards && (\n            <div>\n              <i>{quest.rewards}</i>\n            </div>\n          )}\n        </>\n      }\n      placement={'top'}\n      {...props}\n    >\n      {children}\n    </Tooltip>\n  )\n})\n\nconst getTagIcon = (questStatus: QUEST_STATUS) => {\n  switch (questStatus) {\n    case QUEST_STATUS.ALREADY_COMPLETED:\n      return IconNames.TICK\n    case QUEST_STATUS.LOCKED:\n      return IconNames.LOCK\n    default:\n      return null\n  }\n}\n\nexport const QuestTag = ({ code }: { code: string }) => {\n  const { setSearchInput } = useSearchInput()\n  const { setCategoryTagsAll, setTypeTagsAll } = useFilterTags()\n  const maybeQuest = useQuestByCode(code)\n  const maybeGameId = maybeQuest?.gameId ?? null\n  const questStatus = useQuestStatus(maybeGameId)\n  const tagIcon = getTagIcon(questStatus)\n\n  const handleClick = useCallback(() => {\n    setSearchInput(code)\n    setCategoryTagsAll()\n    setTypeTagsAll()\n  }, [code, setCategoryTagsAll, setSearchInput, setTypeTagsAll])\n  const indicatorColor = guessQuestCategory(code).color\n  const fontColor =\n    indicatorColor === '#fff' || indicatorColor === '#87da61'\n      ? 'black'\n      : 'white'\n\n  if (!maybeQuest) {\n    return (\n      <TagWrapper\n        icon={IconNames.HELP}\n        style={{ color: fontColor, background: indicatorColor }}\n      >\n        {code}\n      </TagWrapper>\n    )\n  }\n\n  const quest = maybeQuest.docQuest\n  return (\n    <QuestTooltip quest={quest}>\n      <TagWrapper\n        interactive\n        icon={tagIcon}\n        onClick={handleClick}\n        style={{ color: fontColor, background: indicatorColor }}\n      >\n        {code}\n      </TagWrapper>\n    </QuestTooltip>\n  )\n}\n"],"names":[],"sourceRoot":""}