{"version":3,"file":"stories-App-stories.e8c9f978.iframe.bundle.js","mappings":";;;;;;;;;AAwFA;;;;;;;;AC5DA;;;ACZA;;;;;;;;;;;;;;;;;AAmBA;;;;;;;;;;;ACbA;;AAIA","sources":["webpack://poi-plugin-quest-info-2/./src/tags.tsx","webpack://poi-plugin-quest-info-2/./src/Toolbar.tsx","webpack://poi-plugin-quest-info-2/./src/components/QuestList.tsx","webpack://poi-plugin-quest-info-2/./src/App.tsx"],"sourcesContent":["import { Tag } from '@blueprintjs/core'\nimport { IconNames } from '@blueprintjs/icons'\nimport React from 'react'\nimport styled from 'styled-components'\nimport { useGameTab, usePluginTranslation } from './poi/hooks'\nimport { GameQuest, QuestTab } from './poi/types'\nimport type { UnionQuest } from './questHelper'\nimport {\n  hasNewQuest,\n  isArsenalQuest,\n  isCompositionQuest,\n  isDailyQuest,\n  isExerciseQuest,\n  isExpeditionQuest,\n  isInProgressQuest,\n  isModernizationQuest,\n  isMonthlyQuest,\n  isNewQuest,\n  isQuarterlyQuest,\n  isSingleQuest,\n  isSortieQuest,\n  isSupplyOrDockingQuest,\n  isUnknownCategoryQuest,\n  isWeeklyQuest,\n  isYearlyQuest,\n  newQuestNumber,\n} from './questHelper'\nimport {\n  ALL_CATEGORY_TAG,\n  ALL_TYPE_TAG,\n  PROGRESS_TAG,\n  useSyncWithGame,\n} from './store'\nimport { useFilterProgressTag, useFilterTags } from './store/filterTags'\nimport { useGlobalGameQuest, useGlobalQuestStatusNum } from './store/gameQuest'\n\nconst withDocQuest =\n  <T,>(filterFn: (q: UnionQuest['docQuest']) => T) =>\n  (unionQuest: UnionQuest) =>\n    filterFn(unionQuest.docQuest)\n\nconst withGameQuestOr =\n  <T,>(filterFn: (q: GameQuest) => T, fallback: T) =>\n  ({ gameQuest }: UnionQuest) => {\n    if (!gameQuest) {\n      return fallback\n    }\n    return filterFn(gameQuest)\n  }\n\nexport const CATEGORY_TAGS = [\n  ALL_CATEGORY_TAG,\n  { name: 'Composition', filter: withDocQuest(isCompositionQuest) },\n  { name: 'Sortie', filter: withDocQuest(isSortieQuest) },\n  { name: 'Exercise', filter: withDocQuest(isExerciseQuest) },\n  { name: 'Expedition', filter: withDocQuest(isExpeditionQuest) },\n  { name: 'Supply / Docking', filter: withDocQuest(isSupplyOrDockingQuest) },\n  { name: 'Arsenal', filter: withDocQuest(isArsenalQuest) },\n  { name: 'Modernization', filter: withDocQuest(isModernizationQuest) },\n  { name: 'Others', filter: withDocQuest(isUnknownCategoryQuest) },\n] as const\n\nexport const TYPE_TAGS = [\n  ALL_TYPE_TAG,\n  {\n    name: 'In Progress',\n    filter: withGameQuestOr(isInProgressQuest, false),\n  },\n  { name: 'New', filter: isNewQuest },\n  { name: 'Daily', filter: isDailyQuest },\n  { name: 'Weekly', filter: isWeeklyQuest },\n  { name: 'Monthly', filter: isMonthlyQuest },\n  { name: 'One-time', filter: isSingleQuest },\n  { name: 'Quarterly', filter: isQuarterlyQuest },\n  { name: 'Yearly', filter: isYearlyQuest },\n] as const\n\nconst TagsWrapper = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  margin-left: -4px;\n  margin-right: -4px;\n\n  & > * {\n    margin: 4px;\n  }\n`\n\nexport const ProgressTags = () => {\n  const { t } = usePluginTranslation()\n  const { progressTag, toggleTag } = useFilterProgressTag()\n  const {\n    lockedQuestNum,\n    unlockedQuestNum,\n    completedQuestNum,\n    alreadyCompletedQuestNum,\n  } = useGlobalQuestStatusNum()\n  const completedQuestSuffix =\n    completedQuestNum > 0\n      ? `${alreadyCompletedQuestNum} + ${completedQuestNum}`\n      : alreadyCompletedQuestNum\n  return (\n    <>\n      <Tag\n        onClick={() => {\n          toggleTag(PROGRESS_TAG.Locked)\n        }}\n        intent={progressTag === PROGRESS_TAG.Locked ? 'success' : 'none'}\n        interactive={true}\n      >\n        {t('Locked', { number: lockedQuestNum })}\n      </Tag>\n      <Tag\n        icon={IconNames.EXCHANGE}\n        onClick={() => {\n          toggleTag(PROGRESS_TAG.Unlocked)\n        }}\n        intent={progressTag === PROGRESS_TAG.Unlocked ? 'success' : 'none'}\n        interactive={true}\n      >\n        {t('Unlocked', { number: unlockedQuestNum })}\n      </Tag>\n      <Tag\n        onClick={() => {\n          toggleTag(PROGRESS_TAG.AlreadyCompleted)\n        }}\n        intent={\n          progressTag === PROGRESS_TAG.AlreadyCompleted ? 'success' : 'none'\n        }\n        interactive={true}\n      >\n        {t('Already Completed', {\n          number: completedQuestSuffix,\n        })}\n      </Tag>\n    </>\n  )\n}\n\nexport const CategoryTags = () => {\n  const { t } = usePluginTranslation()\n  const { categoryTags, setCategoryTags } = useFilterTags()\n\n  return (\n    <TagsWrapper>\n      {CATEGORY_TAGS.map(({ name }) => (\n        <Tag\n          onClick={() => setCategoryTags(name)}\n          intent={\n            categoryTags[name]\n              ? name === ALL_CATEGORY_TAG.name\n                ? 'success'\n                : 'primary'\n              : 'none'\n          }\n          interactive={true}\n          key={name}\n        >\n          {t(name)}\n        </Tag>\n      ))}\n\n      <ProgressTags />\n    </TagsWrapper>\n  )\n}\n\nexport const TypeTags = () => {\n  const { t } = usePluginTranslation()\n  const gameTab = useGameTab()\n  const { syncWithGame } = useSyncWithGame()\n  const gameQuests = useGlobalGameQuest()\n  const { progressTag } = useFilterProgressTag()\n\n  const inProgressQuest = gameQuests.filter((gameQuest) =>\n    isInProgressQuest(gameQuest),\n  )\n  const { typeTags, setTypeTags } = useFilterTags()\n\n  const limitSwitch = syncWithGame && gameTab !== QuestTab.ALL\n\n  return (\n    <TagsWrapper>\n      <Tag\n        intent={typeTags['All'] ? 'success' : 'none'}\n        interactive={true}\n        onClick={() => setTypeTags('All')}\n      >\n        {t('All')}\n      </Tag>\n\n      <Tag\n        intent={\n          typeTags['In Progress']\n            ? progressTag === PROGRESS_TAG.AlreadyCompleted ||\n              progressTag === PROGRESS_TAG.Locked\n              ? 'warning'\n              : 'primary'\n            : 'none'\n        }\n        interactive={true}\n        onClick={() => setTypeTags('In Progress')}\n      >\n        {t('In Progress', { number: inProgressQuest.length })}\n      </Tag>\n\n      {hasNewQuest && (\n        <Tag\n          intent={typeTags['New'] ? 'primary' : 'none'}\n          interactive={true}\n          onClick={() => setTypeTags('New')}\n        >\n          {t('New', { number: newQuestNumber })}\n        </Tag>\n      )}\n\n      {TYPE_TAGS.slice(3).map((tag) => (\n        <Tag\n          onClick={() => setTypeTags(tag.name)}\n          intent={\n            typeTags[tag.name] ? (limitSwitch ? 'warning' : 'primary') : 'none'\n          }\n          interactive={true}\n          key={tag.name}\n        >\n          {t(tag.name)}\n        </Tag>\n      ))}\n    </TagsWrapper>\n  )\n}\n","import { Button, InputGroup } from '@blueprintjs/core'\nimport { IconNames } from '@blueprintjs/icons'\nimport type { ChangeEvent } from 'react'\nimport React, { useCallback } from 'react'\nimport styled from 'styled-components'\nimport { usePluginTranslation } from './poi/hooks'\nimport { QUEST_STATUS, UnionQuest } from './questHelper'\nimport { PROGRESS_TAG, useQuest } from './store'\nimport {\n  useFilterProgressTag,\n  useFilterTags,\n  useSyncGameTagEffect,\n} from './store/filterTags'\nimport { useGlobalQuestStatusQuery } from './store/gameQuest'\nimport { useSearchInput, useStableSearchWords } from './store/search'\nimport { CATEGORY_TAGS, CategoryTags, TYPE_TAGS, TypeTags } from './tags'\nimport { And, Or } from './utils'\n\nconst ToolbarWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  padding: 4px 8px;\n\n  & > * + * {\n    margin-top: 8px;\n  }\n`\n\nexport const SearchInput: React.FC = () => {\n  const { t } = usePluginTranslation()\n  const { searchInput, setSearchInput } = useSearchInput()\n\n  const handleChange = useCallback(\n    (event: ChangeEvent<HTMLInputElement>) =>\n      setSearchInput(event.target.value),\n    [setSearchInput],\n  )\n\n  const handleClear = useCallback(() => setSearchInput(''), [setSearchInput])\n\n  return (\n    <InputGroup\n      value={searchInput}\n      onChange={handleChange}\n      placeholder={t('Search')}\n      leftIcon={IconNames.SEARCH}\n      rightElement={\n        <>\n          {!!searchInput && (\n            <Button icon={IconNames.CROSS} onClick={handleClear} />\n          )}\n        </>\n      }\n      type=\"text\"\n    />\n  )\n}\n\nexport const Toolbar = () => {\n  // TODO remove\n  useSyncGameTagEffect()\n\n  return (\n    <ToolbarWrapper>\n      <SearchInput></SearchInput>\n      <CategoryTags />\n      <TypeTags />\n    </ToolbarWrapper>\n  )\n}\n\nconst useInputStringFilter = () => {\n  const searchKeywords = useStableSearchWords()\n  const stringFilter = useCallback(\n    (quest: UnionQuest) => {\n      if (!searchKeywords || !searchKeywords.length) {\n        return true\n      }\n      const text = `${quest.docQuest.code} ${quest.docQuest.name} ${\n        quest.docQuest.desc\n      } ${quest.docQuest.rewards ?? ''} ${quest.docQuest.memo2 ?? ''}`\n      return searchKeywords.some((keyword) =>\n        text.toUpperCase().includes(keyword),\n      )\n    },\n    [searchKeywords],\n  )\n  return stringFilter\n}\n\nconst useToolbarFilter = (): ((quest: UnionQuest) => boolean) => {\n  const searchFilter = useInputStringFilter()\n  const { typeTags, categoryTags } = useFilterTags()\n\n  const { progressTag } = useFilterProgressTag()\n  const questStatusQuery = useGlobalQuestStatusQuery()\n\n  const progressTagFilter = useCallback(\n    (quest: UnionQuest): boolean => {\n      const questStatus = questStatusQuery(quest.gameId)\n      switch (progressTag) {\n        case PROGRESS_TAG.All:\n          return true\n        case PROGRESS_TAG.Locked:\n          return (\n            questStatus === QUEST_STATUS.LOCKED ||\n            questStatus === QUEST_STATUS.UNKNOWN\n          )\n        case PROGRESS_TAG.Unlocked:\n          return (\n            questStatus === QUEST_STATUS.DEFAULT ||\n            questStatus === QUEST_STATUS.IN_PROGRESS ||\n            questStatus === QUEST_STATUS.COMPLETED\n          )\n        case PROGRESS_TAG.AlreadyCompleted:\n          return (\n            questStatus === QUEST_STATUS.COMPLETED ||\n            questStatus === QUEST_STATUS.ALREADY_COMPLETED\n          )\n        default:\n          console.warn('Unknown progressTag type!', progressTag)\n      }\n      return true\n    },\n    [progressTag, questStatusQuery],\n  )\n\n  const typeTagsFilter = Or(\n    ...TYPE_TAGS.filter((tag) => typeTags[tag.name]).map((tag) => tag.filter),\n  )\n  const categoryTagsFilter = Or(\n    ...CATEGORY_TAGS.filter((tag) => categoryTags[tag.name]).map(\n      (tag) => tag.filter,\n    ),\n  )\n\n  const toolbarFilter = And(\n    searchFilter,\n    typeTagsFilter,\n    categoryTagsFilter,\n    progressTagFilter,\n  )\n\n  return toolbarFilter\n}\n\nexport const useFilterQuest = () => {\n  const toolbarFilter = useToolbarFilter()\n  return useQuest().filter(toolbarFilter)\n}\n","import React, { useCallback, useEffect, useRef } from 'react'\nimport AutoSizer from 'react-virtualized-auto-sizer'\n// https://github.com/bvaughn/react-window\nimport { VariableSizeList as List, ListChildComponentProps } from 'react-window'\nimport styled from 'styled-components'\nimport { useIsQuestPluginTab } from '../poi/hooks'\nimport type { UnionQuest } from '../questHelper'\nimport { QuestCard } from './QuestCard'\n\nconst QuestListWrapper = styled.div`\n  flex: 1;\n  overflow: hidden;\n`\n\n// CSS - Overflow: Scroll; - Always show vertical scroll bar?\n// See https://stackoverflow.com/questions/7492062/css-overflow-scroll-always-show-vertical-scroll-bar\nconst ListWrapper = styled(List)`\n  -webkit-overflow-scrolling: auto;\n\n  ::-webkit-scrollbar {\n    -webkit-appearance: none;\n    width: 8px;\n  }\n\n  ::-webkit-scrollbar-thumb {\n    border-radius: 4px;\n    background-color: rgba(1, 1, 1, 0.3);\n  }\n\n  ::-webkit-scrollbar {\n    border-radius: 4px;\n    background-color: rgba(1, 1, 1, 0.1);\n  }\n`\n\nexport const QuestList = ({ quests }: { quests: UnionQuest[] }) => {\n  const activeTab = useIsQuestPluginTab()\n  const listRef = useRef<List>(null)\n  const rowHeights = useRef<Record<number, number>>({})\n\n  useEffect(() => {\n    listRef.current?.resetAfterIndex(0)\n  }, [quests])\n\n  useEffect(() => {\n    if (activeTab) {\n      listRef.current?.resetAfterIndex(0)\n    }\n  }, [activeTab])\n\n  const setRowHeight = useCallback((index, size) => {\n    if (rowHeights.current[index] === size) {\n      return\n    }\n    rowHeights.current = { ...rowHeights.current, [index]: size }\n    listRef.current?.resetAfterIndex(index)\n  }, [])\n\n  const getRowHeight = useCallback((index) => {\n    return rowHeights.current[index] + 8 || 200\n  }, [])\n\n  const Row = ({ index, style }: ListChildComponentProps) => {\n    const rowRef = useRef<HTMLDivElement>(null)\n\n    const quest = quests[index]\n    const { gameId } = quest\n    const { code, name, desc, rewards, memo2 } = quest.docQuest\n\n    useEffect(() => {\n      if (rowRef.current) {\n        setRowHeight(index, rowRef.current.clientHeight)\n      }\n    }, [index])\n\n    return (\n      <div style={style}>\n        <div ref={rowRef}>\n          <QuestCard\n            style={{ margin: '4px' }}\n            gameId={gameId}\n            code={code}\n            name={name}\n            desc={desc}\n            tip={rewards}\n            tip2={memo2}\n          />\n        </div>\n      </div>\n    )\n  }\n\n  return (\n    <QuestListWrapper>\n      <AutoSizer>\n        {({ height, width }) => (\n          <ListWrapper\n            ref={listRef}\n            height={height}\n            width={width}\n            itemCount={quests.length}\n            estimatedItemSize={200}\n            itemSize={getRowHeight}\n          >\n            {Row}\n          </ListWrapper>\n        )}\n      </AutoSizer>\n    </QuestListWrapper>\n  )\n}\n","import { Text } from '@blueprintjs/core'\nimport React, { StrictMode } from 'react'\nimport styled from 'styled-components'\n\nimport { Toolbar, useFilterQuest } from './Toolbar'\nimport { QuestList } from './components/QuestList'\nimport { usePluginTranslation } from './poi/hooks'\nimport { StoreProvider } from './store'\n\nconst Container = styled.div`\n  display: flex;\n  flex: 1;\n  flex-direction: column;\n  height: 100%;\n  overflow: hidden;\n  user-select: text;\n\n  & > * + * {\n    margin-top: 8px;\n  }\n`\n\nconst CountText = styled(Text)`\n  margin: 0 8px;\n`\n\nconst Main: React.FC = () => {\n  const { t } = usePluginTranslation()\n  const quests = useFilterQuest()\n\n  return (\n    <>\n      <Toolbar></Toolbar>\n      <CountText>{t('TotalQuests', { number: quests.length })}</CountText>\n      <QuestList quests={quests}></QuestList>\n    </>\n  )\n}\n\nexport const App = () => (\n  <StrictMode>\n    <StoreProvider>\n      <Container>\n        <Main></Main>\n      </Container>\n    </StoreProvider>\n  </StrictMode>\n)\n"],"names":[],"sourceRoot":""}