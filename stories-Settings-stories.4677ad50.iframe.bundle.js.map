{"version":3,"file":"stories-Settings-stories.4677ad50.iframe.bundle.js","mappings":";;;;;;;;;AAqCA","sources":["webpack://poi-plugin-quest-info-2/./src/Settings.tsx"],"sourcesContent":["import {\n  AnchorButton,\n  Button,\n  Checkbox,\n  Intent,\n  Text,\n  TextArea,\n} from '@blueprintjs/core'\nimport { IconNames } from '@blueprintjs/icons'\nimport type { ChangeEvent } from 'react'\nimport React, { StrictMode, useCallback, useState } from 'react'\nimport styled from 'styled-components'\nimport { version as DATA_VERSION } from '../build/kcanotifyGamedata'\nimport { homepage, version as PACKAGE_VERSION } from '../package.json'\nimport { IN_POI } from './poi/env'\nimport { usePluginTranslation, useStateExporter } from './poi/hooks'\nimport { tips } from './poi/utils'\nimport {\n  StoreProvider,\n  useLanguage,\n  usePreferKcwiki,\n  useRemoveStorage,\n} from './store'\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  user-select: text;\n\n  & > * + * {\n    margin-top: 8px;\n  }\n`\n\nconst useIsSimplifiedChinese = () => useLanguage() === 'zh-CN'\n\nconst DataExportArea = () => {\n  const [text, setText] = useState<string>('')\n  const { t } = usePluginTranslation()\n  const { exportQuestDataToClipboard, importAsPoiState } = useStateExporter()\n\n  const handleChange = useCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    setText(e.target.value)\n  }, [])\n\n  const handleImportData = useCallback(() => {\n    importAsPoiState(text)\n    setText('')\n    tips.success(t('Import data success'))\n  }, [importAsPoiState, t, text])\n\n  const handleExportData = useCallback(async () => {\n    try {\n      await exportQuestDataToClipboard()\n      tips.success(t('Copied data to clipboard'))\n    } catch (error) {\n      console.error(error)\n      tips.error(t('Failed to export quest data! Please sync quest data first'))\n    }\n  }, [exportQuestDataToClipboard, t])\n\n  return IN_POI ? (\n    <Button\n      icon={IconNames.EXPORT}\n      text={t('Export quest data')}\n      onClick={handleExportData}\n    />\n  ) : (\n    <>\n      <TextArea\n        growVertically={false}\n        intent={Intent.PRIMARY}\n        onChange={handleChange}\n        value={text}\n      />\n      <Button\n        icon={IconNames.IMPORT}\n        text={t('Import quest data')}\n        onClick={handleImportData}\n      />\n    </>\n  )\n}\n\nconst SettingsMain = () => {\n  const { t } = usePluginTranslation()\n  const isSimplifiedChinese = useIsSimplifiedChinese()\n  const removeStorage = useRemoveStorage()\n  const [preferKcwiki, setPreferKcwiki] = usePreferKcwiki()\n  const handleEnabledChange: React.FormEventHandler<HTMLInputElement> =\n    useCallback(() => {\n      setPreferKcwiki(!preferKcwiki)\n    }, [preferKcwiki, setPreferKcwiki])\n\n  return (\n    <>\n      <Checkbox\n        checked={preferKcwiki}\n        disabled={!isSimplifiedChinese}\n        label={t('Use Kcwiki data')}\n        onChange={handleEnabledChange}\n      />\n\n      <Text>{t('Version', { version: PACKAGE_VERSION })}</Text>\n      <Text>{t('Data Version', { version: DATA_VERSION })}</Text>\n      <AnchorButton\n        icon={IconNames.CODE}\n        rightIcon={IconNames.SHARE}\n        text={t('View source code on GitHub')}\n        href={homepage}\n        target=\"_blank\"\n      />\n\n      <Button\n        icon={IconNames.TRASH}\n        text={t('Restore defaults')}\n        onClick={removeStorage}\n      />\n\n      <DataExportArea />\n    </>\n  )\n}\n\nexport const Settings = () => (\n  <StrictMode>\n    <StoreProvider>\n      <Container>\n        <SettingsMain />\n      </Container>\n    </StoreProvider>\n  </StrictMode>\n)\n"],"names":[],"sourceRoot":""}